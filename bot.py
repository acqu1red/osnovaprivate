import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN, SUBSCRIPTION_PRICES, CHANNEL_NAME, CHANNEL_DESCRIPTION, MINI_APP_URL
from payment_handler import PaymentHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class CatalystBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.payment_handler = PaymentHandler()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [
                InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment_menu"),
                InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ", callback_data="channel_info")
            ],
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", web_app=WebAppInfo(url=MINI_APP_URL))
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–∞–Ω–∞–ª–∞ CATALYST CLUB!

üîê –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ "{CHANNEL_NAME}" –∏ –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.

üíé **–ü–æ–¥–ø–∏—Å–∫–∞**: –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è 1500‚ÇΩ –∏–ª–∏ ~14$
üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –∑–≤–µ–∑–¥–∞—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è
        """
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "payment_menu":
            await self.show_payment_menu(query)
        elif query.data == "channel_info":
            await self.show_channel_info(query)
        elif query.data == "back_to_main":
            await self.back_to_main_menu(query)
        elif query.data in ["1_month", "6_months", "12_months"]:
            await self.show_payment_options(query)
        elif query.data == "back_to_payment":
            await self.show_payment_menu(query)
        elif query.data == "card_payment":
            await self.payment_handler.process_card_payment(update, context, "1_month")
        elif query.data == "terms":
            await self.payment_handler.show_terms(update, context)
        elif query.data == "web_app_data":
            await self.handle_web_app_data(update, context)
    
    async def show_payment_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
        keyboard = [
            [
                InlineKeyboardButton("1Ô∏è‚É£ 1 –º–µ—Å—è—Ü - 1500‚ÇΩ", callback_data="1_month"),
                InlineKeyboardButton("6Ô∏è‚É£ 6 –º–µ—Å—è—Ü–µ–≤ - 8000‚ÇΩ", callback_data="6_months")
            ],
            [
                InlineKeyboardButton("1Ô∏è‚É£2Ô∏è‚É£ 12 –º–µ—Å—è—Ü–µ–≤ - 10000‚ÇΩ", callback_data="12_months")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        payment_text = """
üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ë–∞–∑—É**

üìÖ **1 –º–µ—Å—è—Ü**: 1500 —Ä—É–±–ª–µ–π
üìÖ **6 –º–µ—Å—è—Ü–µ–≤**: 8000 —Ä—É–±–ª–µ–π  
üìÖ **12 –º–µ—Å—è—Ü–µ–≤**: 10000 —Ä—É–±–ª–µ–π

üí± *–¶–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–µ–≤—Ä–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É*
üí≥ *–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–µ–≤—Ä–æ/—Ä—É–±–ª—è—Ö*

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ ‚¨áÔ∏è
        """
        
        await query.edit_message_text(payment_text, reply_markup=reply_markup)
    
    async def show_payment_options(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
        duration_map = {
            "1_month": "1 –º–µ—Å—è—Ü",
            "6_months": "6 –º–µ—Å—è—Ü–µ–≤", 
            "12_months": "12 –º–µ—Å—è—Ü–µ–≤"
        }
        
        duration = duration_map.get(query.data, "1 –º–µ—Å—è—Ü")
        
        keyboard = [
            [
                InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞ (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)", callback_data="card_payment")
            ],
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", web_app=WebAppInfo(url=MINI_APP_URL))
            ],
            [
                InlineKeyboardButton("üìÑ –î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã", callback_data="terms")
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_payment")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        payment_options_text = f"""
ü¶ç **–ó–ê–ö–†–´–¢–´–ô –ö–ê–ù–ê–õ "{CHANNEL_NAME}" –Ω–∞ {duration}**

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∏–¥ –æ–ø–ª–∞—Ç—ã:

‚ö†Ô∏è *–ï—Å–ª–∏ –≤—ã –∏–∑ –£–∫—Ä–∞–∏–Ω—ã, –≤–∫–ª—é—á–∏—Ç–µ VPN*
üí≥ *–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π*
‚öôÔ∏è *–î–∞–ª–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π –≤ –ú–µ–Ω—é –±–æ—Ç–∞*
ü™ô *–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ–∞—Ö 6/12 –º–µ—Å*
        """
        
        await query.edit_message_text(payment_options_text, reply_markup=reply_markup)
    
    async def show_channel_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        keyboard = [
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", web_app=WebAppInfo(url=MINI_APP_URL))
            ],
            [
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(CHANNEL_DESCRIPTION, reply_markup=reply_markup)
    
    async def back_to_main_menu(self, query):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment_menu"),
                InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ", callback_data="channel_info")
            ],
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", web_app=WebAppInfo(url=MINI_APP_URL))
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–∞–Ω–∞–ª–∞ CATALYST CLUB!

üîê –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∑–∞–∫—Ä—ã—Ç–æ–º –∫–∞–Ω–∞–ª–µ "{CHANNEL_NAME}" –∏ –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.

üíé **–ü–æ–¥–ø–∏—Å–∫–∞**: –µ–∂–µ–º–µ—Å—è—á–Ω–∞—è 1500‚ÇΩ –∏–ª–∏ ~14$
üí≥ –û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –ª—é–±–æ–π –≤–∞–ª—é—Ç–µ, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –∑–≤–µ–∑–¥–∞—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è
        """
        
        await query.edit_message_text(welcome_text, reply_markup=reply_markup)
    
    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
            web_app_data = update.effective_message.web_app_data
            if web_app_data:
                data = json.loads(web_app_data.data)
                
                if data.get('type') == 'new_question':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª
                    await self.send_question_to_channel(context, data['data'])
                    
                elif data.get('type') == 'admin_reply':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await self.send_reply_to_user(context, data['data'])
                    
        except Exception as e:
            logger.error(f"Error handling web app data: {e}")
    
    async def send_question_to_channel(self, context: ContextTypes.DEFAULT_TYPE, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            channel_id = -1002686841761
            message_text = data['message']
            
            await context.bot.send_message(
                chat_id=channel_id,
                text=message_text,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"Error sending to channel: {e}")
    
    async def send_reply_to_user(self, context: ContextTypes.DEFAULT_TYPE, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            user_id = data['userId']
            message = data['message']
            
            keyboard = [
                [
                    InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", web_app=WebAppInfo(url=MINI_APP_URL))
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n{message}",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"Error sending reply to user: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    bot = CatalystBot()
    bot.run()
