import logging
import json
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from urllib.parse import quote
from config import (
    BOT_TOKEN, SUBSCRIPTION_PRICES, CHANNEL_NAME, CHANNEL_DESCRIPTION, 
    MINI_APP_URL, START_MESSAGE, REMINDER_24H_MESSAGE
)
from payment_handler import PaymentHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class CatalystBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.payment_handler = PaymentHandler()
        self.unpaid_users = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö
        self.admin_ids = [8354723250, 7365307696]
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        # –î–∞–Ω–Ω—ã–µ –∏–∑ Mini App (WebApp) –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –≤–∏–¥–µ web_app_data –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        self.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.handle_web_app_data))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å callback query, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –µ—ë
        if "Query is too old" in str(context.error) or "query id is invalid" in str(context.error):
            logger.warning("Callback query expired or invalid - ignoring")
            return
        
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except Exception as e:
                logger.error(f"Could not send error message to user: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        user_mention = f"[{user.first_name}](tg://user?id={user.id})" if user.first_name else f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user.id})"
        
        keyboard = [
            [
                InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment_menu"),
                InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ", callback_data="channel_info")
            ],
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", web_app=WebAppInfo(url=MINI_APP_URL))
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        welcome_text = START_MESSAGE.format(user_mention=user_mention)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ
        self.unpaid_users[user.id] = {
            'start_time': datetime.now(),
            'reminder_24h_sent': False,
            'reminder_35h_sent': False
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        asyncio.create_task(self.schedule_reminders(user.id, context))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        try:
            with open('start.png', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=welcome_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        except FileNotFoundError:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error sending start message with image: {e}")
            # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def schedule_reminders(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
            await asyncio.sleep(24 * 3600)  # 24 —á–∞—Å–∞
            if user_id in self.unpaid_users and not self.unpaid_users[user_id]['reminder_24h_sent']:
                await self.send_24h_reminder(user_id, context)
                self.unpaid_users[user_id]['reminder_24h_sent'] = True
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 35 —á–∞—Å–æ–≤ —Å –≤–∏–¥–µ–æ
            await asyncio.sleep(11 * 3600)  # –ï—â–µ 11 —á–∞—Å–æ–≤ (–≤—Å–µ–≥–æ 35)
            if user_id in self.unpaid_users and not self.unpaid_users[user_id]['reminder_35h_sent']:
                await self.send_35h_reminder(user_id, context)
                self.unpaid_users[user_id]['reminder_35h_sent'] = True
                
        except Exception as e:
            logger.error(f"Error in reminder scheduling for user {user_id}: {e}")
    
    async def send_24h_reminder(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞"""
        try:
            keyboard = [
                [
                    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment_menu")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            with open('prgrev1.png', 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=REMINDER_24H_MESSAGE,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Error sending 24h reminder to user {user_id}: {e}")
    
    async def send_35h_reminder(self, user_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ 35 —á–∞—Å–æ–≤ —Å –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫—Ä—É–∂–æ—á–∫–∞"""
        try:
            keyboard = [
                [
                    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment_menu")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫—Ä—É–∂–æ—á–∫–∞ (–∫–∞–∫ –≤–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ)
            with open('progred2.mp4', 'rb') as video:
                await context.bot.send_video_note(
                    chat_id=user_id,
                    video_note=video,
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"Error sending 35h reminder to user {user_id}: {e}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        try:
            await query.answer()
        except Exception as e:
            logger.warning(f"Could not answer callback query: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback
        
        try:
            if query.data == "payment_menu":
                await self.show_payment_menu(query)
            elif query.data == "channel_info":
                await self.show_channel_info(query)
            elif query.data == "back_to_main":
                await self.back_to_main_menu(query)
            elif query.data in ["1_month", "6_months", "12_months"]:
                await self.show_payment_options(query)
            elif query.data == "back_to_payment":
                await self.show_payment_menu(query)
            elif query.data == "card_payment":
                await self.payment_handler.process_card_payment(update, context, "1_month")
            elif query.data == "terms":
                await self.payment_handler.show_terms(update, context)
            elif query.data == "web_app_data":
                await self.handle_web_app_data(update, context)
        except Exception as e:
            logger.error(f"Error in button_callback for data '{query.data}': {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception as reply_error:
                logger.error(f"Could not send error reply: {reply_error}")
    
    async def show_payment_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
        try:
            keyboard = [
                [
                    InlineKeyboardButton("1Ô∏è‚É£ 1 –º–µ—Å—è—Ü - 1500‚ÇΩ", callback_data="1_month"),
                    InlineKeyboardButton("6Ô∏è‚É£ 6 –º–µ—Å—è—Ü–µ–≤ - 8000‚ÇΩ", callback_data="6_months")
                ],
                [
                    InlineKeyboardButton("1Ô∏è‚É£2Ô∏è‚É£ 12 –º–µ—Å—è—Ü–µ–≤ - 10000‚ÇΩ", callback_data="12_months")
                ],
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            payment_text = """
üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –§–û–†–ú–£–õ–ê**

üìÖ **1 –º–µ—Å—è—Ü**: 1500 —Ä—É–±–ª–µ–π
üìÖ **6 –º–µ—Å—è—Ü–µ–≤**: 8000 —Ä—É–±–ª–µ–π  
üìÖ **12 –º–µ—Å—è—Ü–µ–≤**: 10000 —Ä—É–±–ª–µ–π

üí± *–¶–µ–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–µ–≤—Ä–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É*
üí≥ *–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ –ª—é–±–æ–π –∫–∞—Ä—Ç–æ–π –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö/–µ–≤—Ä–æ/—Ä—É–±–ª—è—Ö*

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ ‚¨áÔ∏è
            """
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if query.message.photo:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞
                try:
                    with open('start.png', 'rb') as photo:
                        await query.edit_message_media(
                            media=InputMediaPhoto(
                                media=photo,
                                caption=payment_text,
                                parse_mode='Markdown'
                            ),
                            reply_markup=reply_markup
                        )
                except FileNotFoundError:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await query.edit_message_text(payment_text, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                await query.edit_message_text(payment_text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in show_payment_menu: {e}")
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            try:
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception as reply_error:
                logger.error(f"Could not send error reply: {reply_error}")
    
    async def show_payment_options(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
        try:
            duration_map = {
                "1_month": "1 –º–µ—Å—è—Ü",
                "6_months": "6 –º–µ—Å—è—Ü–µ–≤", 
                "12_months": "12 –º–µ—Å—è—Ü–µ–≤"
            }
            
            duration = duration_map.get(query.data, "1 –º–µ—Å—è—Ü")
            
            keyboard = [
                [
                    InlineKeyboardButton("üí≥ –ö–∞—Ä—Ç–∞ (–ª—é–±–∞—è –≤–∞–ª—é—Ç–∞)", callback_data="card_payment")
                ],
                [
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", web_app=WebAppInfo(url=MINI_APP_URL))
                ],
                [
                    InlineKeyboardButton("üìÑ –î–æ–≥–æ–≤–æ—Ä –æ—Ñ–µ—Ä—Ç—ã", callback_data="terms")
                ],
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_payment")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            payment_options_text = f"""
ü¶ç **–ó–ê–ö–†–´–¢–´–ô –ö–ê–ù–ê–õ "{CHANNEL_NAME}" –Ω–∞ {duration}**

–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∏–¥ –æ–ø–ª–∞—Ç—ã:

‚ö†Ô∏è *–ï—Å–ª–∏ –≤—ã –∏–∑ –£–∫—Ä–∞–∏–Ω—ã, –≤–∫–ª—é—á–∏—Ç–µ VPN*
üí≥ *–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π*
‚öôÔ∏è *–î–∞–ª–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π –≤ –ú–µ–Ω—é –±–æ—Ç–∞*
ü™ô *–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–π –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ–∞—Ö 6/12 –º–µ—Å*
            """
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if query.message.photo:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞
                try:
                    with open('start.png', 'rb') as photo:
                        await query.edit_message_media(
                            media=InputMediaPhoto(
                                media=photo,
                                caption=payment_options_text,
                                parse_mode='Markdown'
                            ),
                            reply_markup=reply_markup
                        )
                except FileNotFoundError:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await query.edit_message_text(payment_options_text, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                await query.edit_message_text(payment_options_text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in show_payment_options: {e}")
            try:
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception as reply_error:
                logger.error(f"Could not send error reply: {reply_error}")
    
    async def show_channel_info(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            keyboard = [
                [
                    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment_menu")
                ],
                [
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", web_app=WebAppInfo(url=MINI_APP_URL))
                ],
                [
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            if query.message.photo:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–µ–¥–∏–∞
                try:
                    with open('start.png', 'rb') as photo:
                        await query.edit_message_media(
                            media=InputMediaPhoto(
                                media=photo,
                                caption=CHANNEL_DESCRIPTION,
                                parse_mode='Markdown'
                            ),
                            reply_markup=reply_markup
                        )
                except FileNotFoundError:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await query.edit_message_text(CHANNEL_DESCRIPTION, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                await query.edit_message_text(CHANNEL_DESCRIPTION, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in show_channel_info: {e}")
            try:
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception as reply_error:
                logger.error(f"Could not send error reply: {reply_error}")
    
    async def back_to_main_menu(self, query):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            user = query.from_user
            user_mention = f"[{user.first_name}](tg://user?id={user.id})" if user.first_name else f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user.id})"
            
            keyboard = [
                [
                    InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="payment_menu"),
                    InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–Ω–∞–ª–µ", callback_data="channel_info")
                ],
                [
                    InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", web_app=WebAppInfo(url=MINI_APP_URL))
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            welcome_text = START_MESSAGE.format(user_mention=user_mention)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            try:
                with open('start.png', 'rb') as photo:
                    await query.edit_message_media(
                        media=InputMediaPhoto(
                            media=photo,
                            caption=welcome_text,
                            parse_mode='Markdown'
                        ),
                        reply_markup=reply_markup
                    )
            except FileNotFoundError:
                # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"Error sending back to main menu with image: {e}")
                # Fallback –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                await query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error in back_to_main_menu: {e}")
            try:
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception as reply_error:
                logger.error(f"Could not send error reply: {reply_error}")
    
    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Mini App"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
            web_app_data = update.effective_message.web_app_data
            if web_app_data:
                data = json.loads(web_app_data.data)
                
                if data.get('type') == 'new_question':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∫–∞–Ω–∞–ª
                    await self.send_question_to_channel(context, data['data'])
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                    await self.send_admin_notifications(context, data['data'])
                    
                elif data.get('type') == 'admin_reply':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await self.send_reply_to_user(context, data['data'])
                    
        except Exception as e:
            logger.error(f"Error handling web app data: {e}")
    
    async def send_question_to_channel(self, context: ContextTypes.DEFAULT_TYPE, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–∞–Ω–∞–ª"""
        try:
            channel_id = -1002686841761
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
            user_info = data['user']
            username = user_info.get('username', '—Å–∫—Ä—ã—Ç')
            first_name = user_info.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            message_text = f"""
üîî **–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**

üë§ **–ò–º—è**: {first_name}
üìù **Username**: @{username}
üÜî **ID**: {user_info.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}

üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ**:
{data.get('question', '–¢–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')}

‚è∞ **–í—Ä–µ–º—è**: {data.get('timestamp', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}

üí° **–ù–∞–∂–º–∏—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Mini App**
            """
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Mini App —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            query_params = (
                f"userId={quote(str(user_info.get('id')))}"
                f"&messageId={quote(str(data.get('message_id')))}"
                f"&first_name={quote(first_name)}"
                f"&username={quote(username)}"
                f"&question={quote(data.get('question', ''))}"
            )
            reply_url = f"{MINI_APP_URL}?{query_params}"
            keyboard = [[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", web_app=WebAppInfo(url=reply_url))]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=channel_id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error sending to channel: {e}")

    async def send_admin_notifications(self, context: ContextTypes.DEFAULT_TYPE, data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ"""
        try:
            user_info = data['user']
            username = user_info.get('username', '—Å–∫—Ä—ã—Ç')
            first_name = user_info.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

            message_text = (
                "üîî –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                f"üë§ –ò–º—è: {first_name}\n"
                f"üìù Username: @{username}\n"
                f"üÜî ID: {user_info.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n\n"
                "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n"
                f"{data.get('question', '–¢–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                "üí° –ù–∞–∂–º–∏—Ç–µ '–û—Ç–≤–µ—Ç–∏—Ç—å', —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )

            # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Mini App —á–µ—Ä–µ–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            query_params = (
                f"userId={quote(str(user_info.get('id')))}"
                f"&messageId={quote(str(data.get('message_id')))}"
                f"&first_name={quote(first_name)}"
                f"&username={quote(username)}"
                f"&question={quote(data.get('question', ''))}"
            )
            reply_url = f"{MINI_APP_URL}?{query_params}"

            keyboard = [[InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", web_app=WebAppInfo(url=reply_url))]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            for admin_id in self.admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                except Exception as send_err:
                    logger.error(f"Error notifying admin {admin_id}: {send_err}")
        except Exception as e:
            logger.error(f"Error in send_admin_notifications: {e}")
    
    async def send_reply_to_user(self, context: ContextTypes.DEFAULT_TYPE, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            user_id = data['userId']
            message = data['message']
            admin_name = data.get('adminName', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
            admin_id = data.get('adminId')
            # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            display_admin_name = (
                f"{admin_name} ‚úì" if admin_id in self.admin_ids else admin_name
            )
            
            keyboard = [
                [
                    InlineKeyboardButton("üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", web_app=WebAppInfo(url=MINI_APP_URL))
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=user_id,
                text=f"üí¨ **–û—Ç–≤–µ—Ç –æ—Ç {display_admin_name}:**\n\n{message}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error sending reply to user: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é - webhook –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            self.application.run_polling(allowed_updates=Update.ALL_TYPES)
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ")

if __name__ == "__main__":
    bot = CatalystBot()
    bot.run()
